// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mindb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB(in *jlexer.Lexer, out *Stats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BucketCount":
			out.BucketCount = int64(in.Int64())
		case "ObjectCount":
			out.ObjectCount = int64(in.Int64())
		case "TotalSize":
			out.TotalSize = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB(out *jwriter.Writer, in Stats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BucketCount\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.BucketCount))
	}
	{
		const prefix string = ",\"ObjectCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.ObjectCount))
	}
	{
		const prefix string = ",\"TotalSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB(l, v)
}
func easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB1(in *jlexer.Lexer, out *PartInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PartNumber":
			out.PartNumber = int(in.Int())
		case "ETag":
			out.ETag = string(in.String())
		case "Size":
			out.Size = int(in.Int())
		case "LastModified":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastModified).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB1(out *jwriter.Writer, in PartInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PartNumber\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PartNumber))
	}
	{
		const prefix string = ",\"ETag\":"
		out.RawString(prefix)
		out.String(string(in.ETag))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"LastModified\":"
		out.RawString(prefix)
		out.Raw((in.LastModified).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PartInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PartInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PartInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PartInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB1(l, v)
}
func easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB2(in *jlexer.Lexer, out *ObjectInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			out.Key = string(in.String())
		case "Size":
			out.Size = int64(in.Int64())
		case "LastModified":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastModified).UnmarshalJSON(data))
			}
		case "ETag":
			out.ETag = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB2(out *jwriter.Writer, in ObjectInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"LastModified\":"
		out.RawString(prefix)
		out.Raw((in.LastModified).MarshalJSON())
	}
	{
		const prefix string = ",\"ETag\":"
		out.RawString(prefix)
		out.String(string(in.ETag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ObjectInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ObjectInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB2(l, v)
}
func easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB3(in *jlexer.Lexer, out *ObjectData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			out.Key = string(in.String())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "ContentType":
			out.ContentType = string(in.String())
		case "LastModified":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastModified).UnmarshalJSON(data))
			}
		case "ETag":
			out.ETag = string(in.String())
		case "Metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Metadata = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Metadata)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Size":
			out.Size = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB3(out *jwriter.Writer, in ObjectData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	{
		const prefix string = ",\"ContentType\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	{
		const prefix string = ",\"LastModified\":"
		out.RawString(prefix)
		out.Raw((in.LastModified).MarshalJSON())
	}
	{
		const prefix string = ",\"ETag\":"
		out.RawString(prefix)
		out.String(string(in.ETag))
	}
	{
		const prefix string = ",\"Metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Metadata {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ObjectData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ObjectData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB3(l, v)
}
func easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB4(in *jlexer.Lexer, out *MultipartUploadInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Bucket":
			out.Bucket = string(in.String())
		case "Key":
			out.Key = string(in.String())
		case "UploadID":
			out.UploadID = string(in.String())
		case "ContentType":
			out.ContentType = string(in.String())
		case "Metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Metadata = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.Metadata)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB4(out *jwriter.Writer, in MultipartUploadInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Bucket\":"
		out.RawString(prefix[1:])
		out.String(string(in.Bucket))
	}
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"UploadID\":"
		out.RawString(prefix)
		out.String(string(in.UploadID))
	}
	{
		const prefix string = ",\"ContentType\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	{
		const prefix string = ",\"Metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Metadata {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				out.String(string(v7Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultipartUploadInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultipartUploadInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultipartUploadInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultipartUploadInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB4(l, v)
}
func easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB5(in *jlexer.Lexer, out *MultipartPart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PartNumber":
			out.PartNumber = int(in.Int())
		case "ETag":
			out.ETag = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB5(out *jwriter.Writer, in MultipartPart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PartNumber\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PartNumber))
	}
	{
		const prefix string = ",\"ETag\":"
		out.RawString(prefix)
		out.String(string(in.ETag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultipartPart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultipartPart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultipartPart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultipartPart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB5(l, v)
}
func easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB6(in *jlexer.Lexer, out *BucketInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "CreationDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB6(out *jwriter.Writer, in BucketInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"CreationDate\":"
		out.RawString(prefix)
		out.Raw((in.CreationDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BucketInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BucketInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComElasticIoHavenGithubComElasticIoMinDB6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BucketInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BucketInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComElasticIoHavenGithubComElasticIoMinDB6(l, v)
}
